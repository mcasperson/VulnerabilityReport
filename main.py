import os
from datetime import datetime
from functools import cmp_to_key
from requests.auth import HTTPBasicAuth
from requests import get
import argparse
import tempfile
import zipfile
import subprocess
import re

parser = argparse.ArgumentParser(description='Scan a deployment for a dependency.')
parser.add_argument('--octopusUrl',
                    dest='octopus_url',
                    action='store',
                    help='The Octopus server URL',
                    required=True)
parser.add_argument('--octopusApiKey',
                    dest='octopus_api_key',
                    action='store',
                    help='The Octopus API key',
                    required=True)
parser.add_argument('--githubUser',
                    dest='github_user',
                    action='store',
                    help='The GitHub username',
                    required=True)
parser.add_argument('--githubToken',
                    dest='github_token',
                    action='store',
                    help='The GitHub token/password',
                    required=True)
parser.add_argument('--octopusSpace',
                    dest='octopus_space',
                    action='store',
                    help='The Octopus space',
                    required=True)
parser.add_argument('--octopusProject',
                    dest='octopus_project',
                    action='store',
                    help='A comma separated list of Octopus projects',
                    required=True)
parser.add_argument('--octopusEnvironment',
                    dest='octopus_environment',
                    action='store',
                    help='The Octopus environment',
                    required=True)
parser.add_argument('--sbomMavenRepo',
                    dest='sbom_maven_repo',
                    action='store',
                    help='The Maven repo holding the SBOM artifacts '
                         + 'e.g. https://maven.pkg.github.com/OctopusSamples/Octopub/',
                    required=True)

args = parser.parse_args()

headers = {"X-Octopus-ApiKey": args.octopus_api_key}
github_auth = HTTPBasicAuth(args.github_user, args.github_token)


def compare_dates(date1, date2):
    # Python 3.6 doesn't handle the colon in the timezone of a string like "2022-01-04T04:23:02.941+00:00".
    # So we need to manually strip it out.
    date1_parsed = datetime.strptime(date1["Created"][:-3] + date1["Created"][-2:], '%Y-%m-%dT%H:%M:%S.%f%z')
    date2_parsed = datetime.strptime(date2["Created"][:-3] + date2["Created"][-2:], '%Y-%m-%dT%H:%M:%S.%f%z')
    if date1_parsed < date2_parsed:
        return -1
    if date1_parsed == date2_parsed:
        return 0
    return 1


def get_space_id(space_name):
    url = args.octopus_url + "/api/spaces?partialName=" + space_name
    response = get(url, headers=headers)
    spaces_json = response.json()
    filtered_items = [a for a in spaces_json["Items"] if a["Name"] == space_name]

    if len(filtered_items) == 0:
        return None

    first_id = filtered_items[0]["Id"]
    return first_id


def get_environment_id(space_id, environment_name):
    url = args.octopus_url + "/api/" + space_id + "/environments?partialName=" + environment_name
    response = get(url, headers=headers)
    json = response.json()

    filtered_items = [a for a in json["Items"] if a["Name"] == environment_name]
    if len(filtered_items) == 0:
        return None

    first_id = filtered_items[0]["Id"]
    return first_id


def get_project_id(space_id, project_name):
    url = args.octopus_url + "/api/" + space_id + "/projects?partialName=" + project_name
    response = get(url, headers=headers)
    json = response.json()

    filtered_items = [a for a in json["Items"] if a["Name"] == project_name]
    if len(filtered_items) == 0:
        return None

    first_id = filtered_items[0]["Id"]
    return first_id


def get_release_id(space_id, environment_id, project_id):
    url = args.octopus_url + "/api/" + space_id + "/deployments?environments=" + environment_id + "&take=1000"
    response = get(url, headers=headers)
    json = response.json()

    filtered_items = [a for a in json["Items"] if a["ProjectId"] == project_id]
    if len(filtered_items) == 0:
        return None

    sorted_list = sorted(filtered_items, key=cmp_to_key(compare_dates), reverse=True)

    release_id = sorted_list[0]["ReleaseId"]
    deployment_process_id = sorted_list[0]["DeploymentProcessId"]

    return release_id, deployment_process_id


def get_deployment_process(space_id, deployment_process_id):
    url = args.octopus_url + "/api/" + space_id + "/deploymentprocesses/" + deployment_process_id
    response = get(url, headers=headers)
    json = response.json()
    return json


def get_package_versions(space_id, release_id, deployment_process):
    url = args.octopus_url + "/api/" + space_id + "/releases/" + release_id
    response = get(url, headers=headers)
    json = response.json()

    package_details = []

    packages = json["SelectedPackages"]
    for package in packages:
        step_name = package["StepName"]
        action_name = package["ActionName"]
        version = package["Version"]
        package_reference_name = package["PackageReferenceName"]

        for step in deployment_process["Steps"]:
            if step["Name"] == step_name:
                for action in step["Actions"]:
                    if action["Name"] == action_name:
                        filtered_packages = [a for a in action["Packages"] if a["Name"] == package_reference_name]
                        if len(filtered_packages) != 0:
                            package_details.append({filtered_packages[0]["PackageId"]: version})

    return package_details


def is_sbom_package(package_id):
    return package_id.endswith("sbom")


def get_sbom_packages(packages):
    sbom_artifacts = []
    for package in packages:
        for package_id in package.keys():
            if is_sbom_package(package_id):
                sbom_artifacts.append(package_id + ":" + package[package_id])
    return sbom_artifacts


def download_maven_artifacts(artifacts):
    filenames = []
    for artifact in artifacts:
        artifact_split = artifact.split(":")
        url = args.sbom_maven_repo \
            + ("/" if not args.sbom_maven_repo.endwith("/") else "") \
            + "/".join(artifact_split[0].split(".")) \
            + "/" + artifact_split[1] \
            + "/" + artifact_split[2] \
            + "/" + artifact_split[1] + "-" + artifact_split[2] + ".zip"

        with tempfile.NamedTemporaryFile(delete=False, suffix=".zip") as tmp_file:
            response = get(url, auth=github_auth)
            tmp_file.write(response.content)
            filenames.append(tmp_file.name)

    return filenames


def extract_bom_xml_file(zip_files):
    json_files = []
    for zip_file in zip_files:
        with zipfile.ZipFile(zip_file, 'r') as zip_ref:
            tmp_dir = tempfile.TemporaryDirectory().name
            zip_ref.extractall(tmp_dir)
            for root, dirs, files in os.walk(tmp_dir):
                for extracted_file in files:
                    filename = os.fsdecode(extracted_file)
                    if filename.endswith("bom.xml"):
                        json_files.append(os.path.join(root, filename))
    return json_files


def run_appthreat(bom):
    out = subprocess.Popen(["/usr/bin/docker", "run", "--rm", "-v", os.path.dirname(bom) + ":/app",
                            "appthreat/dep-scan", "scan", "--bom", "/app/" + os.path.basename(bom), "--type",
                            "bom", "--no-banner"],
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE,
                           universal_newlines=True)
    stdout, stderr = out.communicate()
    return stdout + "\n" + stderr


def generate_vulnerability_report():
    ansi_escape = re.compile(r'(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]')
    report = ""
    space_id = get_space_id(args.octopus_space)
    environment_id = get_environment_id(space_id, args.octopus_environment)
    for project in args.octopus_project.split(","):
        project_id = get_project_id(space_id, project.strip())
        release_id, deployment_process_id = get_release_id(space_id, environment_id, project_id)
        deployment_process = get_deployment_process(space_id, deployment_process_id)
        sbom_packages = get_package_versions(space_id, release_id, deployment_process)
        sbom_artifacts = get_sbom_packages(sbom_packages)
        sbom_zips = download_maven_artifacts(sbom_artifacts)
        sbom_files = extract_bom_xml_file(sbom_zips)
        for sbom in sbom_files:
            output = run_appthreat(sbom)
            report = report + "Vulnerability report for " + project.strip() + "\n" \
                + ("No report generated" if len(output.strip()) == 0 else output.strip()) + "\n"
    return ansi_escape.sub('', report)


report = generate_vulnerability_report()
print(report)
